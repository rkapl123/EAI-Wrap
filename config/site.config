# common EAI-Wrap parameters:
%config = (
	sensitive => {
			# user/pwd/privKey/hostkey for prefix <prefix> (prefix is set in $load[N]{<DB|FTP>}{prefix})
			db => {user => "sensitiveDBuserInfo", pwd => "sensitiveDBPwdInfo"},
			ftp => {user => "sensitiveFTPuserInfo", pwd => "sensitiveFTPPwdInfo", privKey => 'path_to_private_key', hostkey =>'hostkey'},
			smtpAuth => {"user" => 'your@mail.address', pwd => 'your@mail.address.pwd'}, # authentication for smtp server (with user and pwd) used by logging and sendGeneralMail
		},
	folderEnvironmentMapping => {t => "Test", Test => "Test", Dev => "Dev", "" => "Prod"},
	errmailaddress => 'your@mail.address', # address(es) for error mails, usually overridden with centralLogHandling.config
	errmailsubject => "No errMailSubject defined", # initial part for error mail subject (can be enhanced using setErrSubject with context information), overridden with centralLogHandling.config
	fromaddress => 'your@mail.address',
	smtpServer => "your.mail.server", # smtp server for (error) mail sending
	smtpTimeout => 60, # timeout for smtp response
	testerrmailaddress => 'your@mail.address', # error mail address in non prod environment
	logCheckHoliday => "AT", # default holiday for determining business days in log checking (checkLogExist.pl)
	logs_to_be_ignored_in_nonprod => "test2|dontcheckthisone", # don't check log files for these tasks (regexp)
	logRootPath => {"" => "C:/dev/Logs",},
	historyFolder => {"" => "History",},
	historyFolderUpload => {"" => "HistoryUpload",},
	redoDir => {"" => "redo",},
	task => {
		redoTimestampPatternPart => '[\d_]',
		retrySecondsErr => 60*5, # 5 minutes pause with error retries
		#retrySecondsErrAfterXfails => 60*10, # 10 minutes pause with error retries after X fails
		retrySecondsXfails => 2, # fail count after which the retrySecondsErr are changed to retrySecondsErrAfterXfails
		retrySecondsPlanned => 60*15, # 15 minutes pause with planned retries
		skipHolidaysDefault => "AT",
	},
	DB => {
		server => {Prod => "your_db_server", Test => "your_db_server"}, # hash of env => servername assignments
		cutoffYr2000 => 60, # Cutoff for deciding when 2 digit years should be interpreted as 19xx or 20xx. (before = 19, after = 20)
		database => "pubs", # default database
		DSN => 'driver={SQL Server};Server=$DB->{server}{$execute->{env}};database=$DB->{database};TrustedConnection=Yes;', # connection string for trusted conn (using interpolated variables for server and database)
		# DSN => 'driver={SQL Server};Server=$DB->{server}{$execute->{env}};database=$DB->{database};uid=$DB->{$DB->{prefix}}{user};pwd=$DB->{$DB->{prefix}}{pwd};', # connection string for untrusted conn
		dontWarnOnNotExistingFields => 0, # suppress warning in storeInDB when fields don't exist
		longreadlen => 1024, # DBI setting for minimum buffer retrieving LOB data
		schemaName => "dbo", # default schema name (especially important for MS SQL Server)
	},
	FTP => {
		maxConnectionTries => 5, # try at most to connect maxConnectionTries, then give up
		sshInstallationPath => "C:/dev/EAI/putty/PLINK.EXE", # path to external ssh executable for NET::SFTP::Foreign
	},
	File => {
		format_thousandsep => ",",
		format_decimalsep => ".",
	}
);


